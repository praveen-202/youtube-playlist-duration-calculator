package com.playlist_clac.service;

import com.playlist_clac.dto.PlaylistResponse;

import lombok.Value;

import java.time.Duration;
import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

@Service
public class YoutubeService {

    @Value("${youtube.api.key}")
    private String apiKey;

    private final RestTemplate restTemplate = new RestTemplate();

    public PlaylistResponse fetchPlaylistDuration(String playlistUrl) {
        String playlistId = extractPlaylistId(playlistUrl);
        List<String> videoIds = new ArrayList<>();

        String nextPageToken = "";
        do {
            String playlistApi = "https://www.googleapis.com/youtube/v3/playlistItems?" +
                    "part=contentDetails&maxResults=50&playlistId=" + playlistId +
                    "&pageToken=" + nextPageToken +
                    "&key=" + apiKey;

            Map<String, Object> playlistResponse = restTemplate.getForObject(playlistApi, Map.class);
            List<Map<String, Object>> items = (List<Map<String, Object>>) playlistResponse.get("items");

            for (Map<String, Object> item : items) {
                Map<String, Object> contentDetails = (Map<String, Object>) item.get("contentDetails");
                videoIds.add((String) contentDetails.get("videoId"));
            }

            nextPageToken = (String) playlistResponse.getOrDefault("nextPageToken", "");
        } while (!nextPageToken.isEmpty());

        long totalSeconds = 0;
        for (int i = 0; i < videoIds.size(); i += 50) {
            List<String> batch = videoIds.subList(i, Math.min(i + 50, videoIds.size()));
            String videoApi = "https://www.googleapis.com/youtube/v3/videos?" +
                    "part=contentDetails&id=" + String.join(",", batch) +
                    "&key=" + apiKey;

            Map<String, Object> videoResponse = restTemplate.getForObject(videoApi, Map.class);
            List<Map<String, Object>> videoItems = (List<Map<String, Object>>) videoResponse.get("items");

            for (Map<String, Object> video : videoItems) {
                Map<String, Object> contentDetails = (Map<String, Object>) video.get("contentDetails");
                String duration = (String) contentDetails.get("duration");
                totalSeconds += parseDuration(duration);
            }
        }

        return new PlaylistResponse(videoIds.size(), formatDuration(totalSeconds), getAdjustedTimes(totalSeconds));
    }

    private String extractPlaylistId(String url) {
        Pattern pattern = Pattern.compile("[&?]list=([a-zA-Z0-9_-]+)");
        Matcher matcher = pattern.matcher(url);
        if (matcher.find()) return matcher.group(1);
        throw new IllegalArgumentException("Invalid YouTube playlist URL");
    }

    private long parseDuration(String isoDuration) {
        return Duration.parse(isoDuration).getSeconds();
    }

    private String formatDuration(long totalSeconds) {
        long hours = totalSeconds / 3600;
        long minutes = (totalSeconds % 3600) / 60;
        long seconds = totalSeconds % 60;
        return String.format("%02d:%02d:%02d", hours, minutes, seconds);
    }

    private Map<String, String> getAdjustedTimes(long totalSeconds) {
        Map<String, String> speeds = new LinkedHashMap<>();
        double[] factors = {1.25, 1.5, 1.75, 2.0};
        for (double factor : factors) {
            long adjusted = (long) (totalSeconds / factor);
            speeds.put(factor + "x", formatDuration(adjusted));
        }
        return speeds;
    }
}
